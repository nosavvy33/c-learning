Basic C program

#include <stdio.h>

int main(){
	printf("Hello, World!\n");
	return 0;
}


Preprocessor:

	#include <stdio.h> is part of the pre-processor. At this very point, the code is not compile yet.
	Before compiling, the preprocessor gives instructions as of what libs (that is another file) have to be included in the program
	in order to compile with their required features.
	Preprocessing commands (aka Directives) always start with #

Directives: 

	A directive is a preprocessor command used as a header of a C program.
	They are useful for alot whole number of things, that go from defining static variables to functions
	
	#define this command writes or overwrites constants or so called Macros, that can be eithe constants or functions

	Ex:
		#include <stdio.h>
		#ifndef MESSAGE
			#define MESSAGE "Hello from the header section"
		#endif

		 int main(){
		printf(MESSAGE);
		return 0;
		}
	
	Tooltip: If a directive is too long to fit in a line, use the \ operator, this indicates that the definition
	of the directive continues on the following line
	
		#define message_for(a,b) \
			printf(#a " and " #b ": We messaged you!\n");

	#defined checks whether a Macro (constant or function) is defined, returning a non-zero (true) or a zero (false)

		#if !defined(MESSAGE)
			#define MESSAGE "hELLO from the Header"
		#endif


Storage Classes:

	(For further information, see https://www.geeksforgeeks.org/storage-classes-in-c/ 
	https://docs.microsoft.com/en-us/cpp/c-language/c-storage-classes ) 

	These specifiers are for variables, and they define, mainly, the lifetime and scope of variables.

	auto: default storage class, it is given a specific memory location. So, even though its scope might be limited by the block
	it is within, it can be accessed by a pointer due to having a dedicated memory slot. This keyword is barely ever used.

	register: compiler tries to store them in the microprocessor register, for it, the programs performance is faster in running time.
	Nonetheless, if there is no register available, this register var is only stored in memory. Something useful to know is that
	these vars cannot be accessed by a pointer as their location is not known, behaving like an auto variable.

	extern: this causes variable to be visible to all program files, so to speak, it becomes a global var or func. Even though
	this global cannot be initialized, not at least within their own code block, if invoked and initialized in another file,
	it serves as a reference to the memory location that var is stored in. \ (Continuos operator, what a pun, eh!?)
		if you feel lucky and curious, wanting to define and declare the extern var, then its value cannot be changed later
		nor in other files, as this will get you an "already defined" error in compilation time.

	static: Do not misunderstand this storage class... Important: static vars or funcs are only accesible within the file they
	were defined. They keep their value through every invocation by functions (See the following accepted response in this
	SO question: https://stackoverflow.com/questions/572547/what-does-static-mean-in-c/572550#572550 )
